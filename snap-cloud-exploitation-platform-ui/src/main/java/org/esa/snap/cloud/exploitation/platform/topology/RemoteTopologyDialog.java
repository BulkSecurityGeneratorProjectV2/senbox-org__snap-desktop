package org.esa.snap.cloud.exploitation.platform.topology;

import org.esa.snap.cloud.exploitation.platform.ServerCredentials;
import org.esa.snap.cloud.exploitation.platform.loading.AbstractModalDialog;
import org.esa.snap.cloud.exploitation.platform.loading.ILoadingIndicator;

import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by jcoravu on 17/12/2018.
 */
public class RemoteTopologyDialog extends AbstractModalDialog {

    private RemoteTopologyPanel remoteTopologyPanel;

    public RemoteTopologyDialog(Window parent, String title) {
        super(parent, title, true);
    }

    @Override
    protected final void onAboutToShow() {
        JDialog dialog = getJDialog();
        dialog.setMinimumSize(new Dimension(450, 350));

        ILoadingIndicator loadingIndicator = getLoadingIndicator();
        int threadId = getNewCurrentThreadId();
        ReadServerCredentialsTimerRunnable runnable = new ReadServerCredentialsTimerRunnable(this, loadingIndicator, threadId) {
            @Override
            protected void onSuccessfullyFinish(RemoteTopology remoteTopology) {
                onFinishReadingRemoteTopology(remoteTopology);
            }
        };
        Thread thread = new Thread(runnable);
        thread.start(); // start the thread
    }

    @Override
    protected JPanel buildContentPanel(int gapBetweenColumns, int gapBetweenRows) {
        Insets defaultTextFieldMargins = buildDefaultTextFieldMargins();
        Insets defaultListItemMargins = buildDefaultListItemMargins();
        this.remoteTopologyPanel = new RemoteTopologyPanel(getJDialog(), defaultTextFieldMargins, defaultListItemMargins);
        this.remoteTopologyPanel.addComponents(gapBetweenColumns, gapBetweenRows, true);
        return remoteTopologyPanel;
    }

    @Override
    protected JPanel buildButtonsPanel(ActionListener cancelActionListener) {
        ActionListener saveActionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                saveButtonPressed();
            }
        };
        return buildButtonsPanel("Save", saveActionListener, "Cancel", cancelActionListener);
    }

    private void saveButtonPressed() {
        DefaultListModel<ServerCredentials> model = (DefaultListModel<ServerCredentials>)this.remoteTopologyPanel.getRemoteMachinesList().getModel();
        if (model.size() > 0) {
            List<ServerCredentials> remoteMachines = new ArrayList<ServerCredentials>(model.size());
            for (int i=0; i<model.size(); i++) {
                remoteMachines.add(model.getElementAt(i));
            }
            String sharedFolderURL = this.remoteTopologyPanel.getSharedFolderURLTextField().getText();
            String sharedFolderUsername = this.remoteTopologyPanel.getSharedFolderUsernameTextField().getText();
            String sharedFolderPassword = new String(this.remoteTopologyPanel.getSharedFolderPasswordTextField().getPassword());

            RemoteTopology remoteTopology = new RemoteTopology(sharedFolderURL, sharedFolderUsername, sharedFolderPassword, remoteMachines);

            ILoadingIndicator loadingIndicator = getLoadingIndicator();
            int threadId = getNewCurrentThreadId();
            WriteServerCredentialsTimerRunnable runnable = new WriteServerCredentialsTimerRunnable(this, loadingIndicator, threadId, remoteTopology);
            Thread thread = new Thread(runnable);
            thread.start(); // start the thread
        }
    }

    private void onFinishReadingRemoteTopology(RemoteTopology remoteTopology) {
        if (remoteTopology != null) {
            this.remoteTopologyPanel.getSharedFolderURLTextField().setText(remoteTopology.getSharedFolderURL());
            this.remoteTopologyPanel.getSharedFolderUsernameTextField().setText(remoteTopology.getSharedFolderUsername());
            this.remoteTopologyPanel.getSharedFolderPasswordTextField().setText(remoteTopology.getSharedFolderPassword());

            DefaultListModel<ServerCredentials> model = (DefaultListModel<ServerCredentials>) this.remoteTopologyPanel.getRemoteMachinesList().getModel();
            model.removeAllElements();
            List<ServerCredentials> remoteMachines = remoteTopology.getRemoteMachines();
            for (int i = 0; i < remoteMachines.size(); i++) {
                model.addElement(remoteMachines.get(i));
            }
        }
    }
}
