package org.esa.snap.cloud.exploitation.platform.operator;

import org.apache.commons.lang.SystemUtils;
import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.cloud.exploitation.platform.LocalMachineLinuxMountFolder;
import org.esa.snap.cloud.exploitation.platform.loading.AbstractTimerRunnable;
import org.esa.snap.cloud.exploitation.platform.loading.ILoadingIndicator;
import org.esa.snap.cloud.exploitation.platform.loading.IMessageDialog;
import org.esa.snap.cloud.exploitation.platform.topology.RemoteTopology;
import org.esa.snap.cloud.exploitation.platform.topology.RemoteTopologyUtils;

import java.util.logging.Logger;

public class ReadOperatorRemoteTopologyTimerRunnable extends AbstractTimerRunnable<OperatorRemoteTopology> {

    private static final Logger logger = Logger.getLogger(ReadOperatorRemoteTopologyTimerRunnable.class.getName());

    private final IMessageDialog parentWindow;

    public ReadOperatorRemoteTopologyTimerRunnable(IMessageDialog parentWindow, ILoadingIndicator loadingIndicator, int threadId) {
        super(loadingIndicator, threadId, 500);

        this.parentWindow = parentWindow;
    }

    @Override
    protected final void onTimerWakeUp(String messageToDisplay) {
        super.onTimerWakeUp("Loading...");
    }

    @Override
    protected String getExceptionLoggingMessage() {
        return "Failed to read the operator remote topology from the file.";
    }

    @Override
    protected final void onFailed(Exception exception) {
        this.parentWindow.showErrorDialog("Failed to read the remote topology from the file.", "Failed");
    }

    @Override
    protected final OperatorRemoteTopology execute() throws Exception {
        RemoteTopology remoteTopology = RemoteTopologyUtils.readTopology();

        LocalMachineLinuxMountFolder localMachineMountFolder = null;
        if (SystemUtils.IS_OS_LINUX) {
            localMachineMountFolder = CloudExploitationPlatformOp.mountLinuxLocalFolder(remoteTopology.getRemoteSharedFolderURL(), remoteTopology.getRemoteUsername(),
                                                                      remoteTopology.getRemotePassword(), remoteTopology.getLocalSharedFolderPath(),
                                                                      remoteTopology.getLocalPassword());
        }

        return new OperatorRemoteTopology(remoteTopology, localMachineMountFolder);
    }
}
