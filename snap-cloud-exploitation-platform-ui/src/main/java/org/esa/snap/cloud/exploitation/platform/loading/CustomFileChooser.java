package org.esa.snap.cloud.exploitation.platform.loading;

import org.esa.snap.cloud.exploitation.platform.utils.StringUtils;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.JTextComponent;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

/**
 * Created by jcoravu on 11/1/2019.
 */
public class CustomFileChooser extends JFileChooser {

    public static final String FILE_CHOOSER_READ_ONLY_KEY = "FileChooser.readOnly";

    private final boolean previousReadOnlyFlag;
    private final PropertyChangeListener propertyChangeListener;
    private JTextComponent textField;

    public CustomFileChooser(boolean previousReadOnlyFlag) {
        super();

        this.previousReadOnlyFlag = previousReadOnlyFlag;
        this.propertyChangeListener = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent event) {
                if (JFileChooser.DIRECTORY_CHANGED_PROPERTY.equalsIgnoreCase(event.getPropertyName())) {
                    if (getFileSelectionMode() == JFileChooser.FILES_ONLY) {
                        resetSelectedFile();
                    }
                } else if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equalsIgnoreCase(event.getPropertyName())
                            || JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equalsIgnoreCase(event.getPropertyName())) {

                    if (getFileSelectionMode() == JFileChooser.FILES_ONLY && event.getNewValue() == null) {
                        resetSelectedFile();
                    }
                }
            }
        };
    }

    @Override
    protected JDialog createDialog(Component parent) throws HeadlessException {
        JDialog dialog = super.createDialog(parent);

        dialog.setMinimumSize(new Dimension(450, 350));
        addPropertyChangeListener(this.propertyChangeListener);

        this.textField = findTextField(this);

        return dialog;
    }

    @Override
    public int showDialog(Component parent, String approveButtonText) throws HeadlessException {
        int returnCode = super.showDialog(parent, approveButtonText);

        UIManager.getDefaults().put(FILE_CHOOSER_READ_ONLY_KEY, this.previousReadOnlyFlag);

        return returnCode;
    }

    private JTextComponent findTextField(Container root) {
        Component[] components = root.getComponents();
        for (Component component : components) {
            if (component instanceof JTextComponent) {
                return (JTextComponent) component;
            }
            if (component instanceof Container) {
                JTextComponent filePane = findTextField((Container) component);
                if (filePane != null) {
                    return filePane;
                }
            }
        }
        return null;
    }

    private void resetSelectedFile() {
        removePropertyChangeListener(this.propertyChangeListener);
        setSelectedFile(null);
        setSelectedFiles(null);
        if (this.textField != null) {
            this.textField.setText("");
        }
        addPropertyChangeListener(this.propertyChangeListener);
    }

    public static FileFilter buildXMLFileFilter() {
        return new FileFilter() {
            @Override
            public boolean accept(File file) {
                if (file.isDirectory()) {
                    return true;
                }
                return StringUtils.endsWithIgnoreCase(file.getName(), ".xml");
            }

            @Override
            public String getDescription() {
                return "*.xml";
            }
        };
    }

    public static CustomFileChooser buildFileChooser(String dialogTitle, boolean multiSelectionEnabled, int fileSelectionMode) {
        boolean previousReadOnlyFlag = UIManager.getDefaults().getBoolean(CustomFileChooser.FILE_CHOOSER_READ_ONLY_KEY);
        UIManager.getDefaults().put(CustomFileChooser.FILE_CHOOSER_READ_ONLY_KEY, true);

        CustomFileChooser fileChooser = new CustomFileChooser(previousReadOnlyFlag);
        fileChooser.setDialogTitle(dialogTitle);
        fileChooser.setMultiSelectionEnabled(multiSelectionEnabled);
        fileChooser.setFileSelectionMode(fileSelectionMode);
        return fileChooser;
    }

}
