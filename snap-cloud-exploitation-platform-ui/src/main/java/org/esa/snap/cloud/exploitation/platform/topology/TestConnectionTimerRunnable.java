package org.esa.snap.cloud.exploitation.platform.topology;

import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.cloud.exploitation.platform.RemoteMachineCredentials;
import org.esa.snap.cloud.exploitation.platform.loading.AbstractTimerRunnable;
import org.esa.snap.cloud.exploitation.platform.loading.ILoadingIndicator;
import org.esa.snap.cloud.exploitation.platform.loading.IMessageDialog;

/**
 * Created by jcoravu on 18/12/2018.
 */
public class TestConnectionTimerRunnable extends AbstractTimerRunnable<Boolean> {

    private final IMessageDialog parentWindow;
    private final RemoteMachineCredentials sshServer;

    public TestConnectionTimerRunnable(IMessageDialog parentWindow, ILoadingIndicator loadingIndicator, int threadId, RemoteMachineCredentials sshServerCredentials) {
        super(loadingIndicator, threadId, 500);

        this.parentWindow = parentWindow;
        this.sshServer = sshServerCredentials;
    }

    @Override
    protected void onTimerWakeUp(String messageToDisplay) {
        super.onTimerWakeUp("Testing connection...");
    }

    @Override
    protected Boolean execute() throws Exception {
        return CloudExploitationPlatformOp.canConnectToRemoteMachine(this.sshServer);
    }

    @Override
    protected String getExceptionLoggingMessage() {
        return "Failed to connect to the remote machine '" + this.sshServer.getHostName()+"'.";
    }

    @Override
    protected void onFailed(Exception exception) {
        showConnectionFailedDialog();
    }

    @Override
    protected void onSuccessfullyFinish(Boolean result) {
        if (result.booleanValue()) {
            this.parentWindow.showInformationDialog("Successfully connected to the remote machine.");
        } else {
            showConnectionFailedDialog();
        }
    }

    private void showConnectionFailedDialog() {
        this.parentWindow.showErrorDialog("Failed to connect to the remote machine.");
    }
}
