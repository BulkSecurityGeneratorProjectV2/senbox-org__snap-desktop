package org.esa.snap.cloud.exploitation.platform.topology;

import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.cloud.exploitation.platform.ITestRemoteMachineConnection;
import org.esa.snap.cloud.exploitation.platform.RemoteMachineConnectionResult;
import org.esa.snap.cloud.exploitation.platform.RemoteMachineCredentials;
import org.esa.snap.cloud.exploitation.platform.loading.AbstractTimerRunnable;
import org.esa.snap.cloud.exploitation.platform.loading.ILoadingIndicator;
import org.esa.snap.cloud.exploitation.platform.loading.IMessageDialog;
import org.esa.snap.cloud.exploitation.platform.loading.OneInputRunnable;

import javax.swing.SwingUtilities;

/**
 * Created by jcoravu on 18/12/2018.
 */
public class TestConnectionTimerRunnable extends AbstractTimerRunnable<RemoteMachineConnectionResult> {

    private final IMessageDialog parentWindow;
    private final RemoteMachineCredentials sshServer;

    private String loadingIndicatorMessage;

    public TestConnectionTimerRunnable(IMessageDialog parentWindow, ILoadingIndicator loadingIndicator, int threadId, RemoteMachineCredentials sshServerCredentials) {
        super(loadingIndicator, threadId, 500);

        this.parentWindow = parentWindow;
        this.sshServer = sshServerCredentials;

        this.loadingIndicatorMessage = "Testing connection...";
    }

    @Override
    protected void onTimerWakeUp(String messageToDisplay) {
        super.onTimerWakeUp(this.loadingIndicatorMessage);

        this.loadingIndicatorMessage = null; // reset the message
    }

    @Override
    protected RemoteMachineConnectionResult execute() throws Exception {
        ITestRemoteMachineConnection callback = new ITestRemoteMachineConnection() {
            @Override
            public void testSSHConnection() {
                displayLoadingIndicatorMessageLater("Testing connection...");
            }

            @Override
            public void testGPTApplication() {
                displayLoadingIndicatorMessageLater("Testing GPT application...");
            }
        };
        return CloudExploitationPlatformOp.canConnectToRemoteMachine(this.sshServer, callback);
    }

    @Override
    protected String getExceptionLoggingMessage() {
        return "Failed to connect to the remote machine '" + this.sshServer.getHostName()+"'.";
    }

    @Override
    protected void onFailed(Exception exception) {
        this.parentWindow.showErrorDialog("Failed to connect to the remote machine.");
    }

    @Override
    protected void onSuccessfullyFinish(RemoteMachineConnectionResult result) {
        if (result.isRemoteMachineAvailable()) {
            StringBuilder message = new StringBuilder();
            message.append("The connection to the remote machine is successfully.");
            if (result.isGPTApplicationAvailable() != null) {
                // the GPT application has been tested
                message.append("\n\n");
                if (result.isGPTApplicationAvailable().booleanValue()) {
                    message.append("The GPT application is available on the remote machine.");
                } else {
                    message.append("The GPT application is not available on the remote machine.");
                }
            }
            this.parentWindow.showInformationDialog(message.toString());
        } else {
            this.parentWindow.showErrorDialog("The connection to the remote machine has failed.");
        }
    }

    private void displayLoadingIndicatorMessageLater(String messageToDisplay) {
        OneInputRunnable<String> runnable = new OneInputRunnable<String>(messageToDisplay) {
            @Override
            protected void execute(String message) {
                onDisplayMessage(message);
            }
        };
        SwingUtilities.invokeLater(runnable);
    }

    private void onDisplayMessage(String messageToDisplay) {
        if (this.loadingIndicatorMessage == null) {
            // the timer is has been activated
            onDisplayLoadingIndicatorMessage(messageToDisplay);
        } else {
            this.loadingIndicatorMessage = messageToDisplay;
        }
    }
}
