package org.esa.snap.cloud.exploitation.platform.operator;

import org.esa.snap.cloud.exploitation.platform.CloudExploitationPlatformOp;
import org.esa.snap.cloud.exploitation.platform.OperatorInitializeException;
import org.esa.snap.cloud.exploitation.platform.loading.AbstractTimerRunnable;
import org.esa.snap.cloud.exploitation.platform.loading.ILoadingIndicator;
import org.esa.snap.cloud.exploitation.platform.loading.IMessageDialog;
import org.esa.snap.core.dataio.ProductIO;
import org.esa.snap.core.datamodel.Product;
import org.esa.snap.core.gpf.GPF;
import org.esa.snap.core.gpf.OperatorSpi;
import org.esa.snap.ui.AppContext;

import java.util.Collections;
import java.util.Map;

/**
 * Created by jcoravu on 27/12/2018.
 */
public class CloudExploitationPlatformTimerRunnable extends AbstractTimerRunnable<Product> {

    private final AppContext appContext;
    private final IMessageDialog parentWindow;
    private final Map<String, Object> parameterMap;
    private final boolean openTargetProductInApplication;

    public CloudExploitationPlatformTimerRunnable(AppContext appContext, IMessageDialog parentWindow, ILoadingIndicator loadingIndicator,
                                                  int threadId, Map<String, Object> parameterMap, boolean openTargetProductInApplication) {

        super(loadingIndicator, threadId, 500);

        this.appContext = appContext;
        this.parentWindow = parentWindow;
        this.parameterMap = parameterMap;
        this.openTargetProductInApplication = openTargetProductInApplication;
    }

    @Override
    protected final void onTimerWakeUp(String messageToDisplay) {
        super.onTimerWakeUp("Processing...");
    }

    @Override
    protected final Product execute() throws Exception {
        Map<String, Product> sourceProducts = Collections.emptyMap();

        String operatorName = OperatorSpi.getOperatorAlias(CloudExploitationPlatformOp.class);

        // create the operator
        CloudExploitationPlatformOp operator = (CloudExploitationPlatformOp)GPF.getDefaultInstance().createOperator(operatorName, this.parameterMap, sourceProducts, null);

        // execute the operator
        operator.execute(null);

        return ProductIO.readProduct(operator.getTargetProductFile());
    }

    @Override
    protected String getExceptionLoggingMessage() {
        return "Failed to execute the operator.";
    }

    @Override
    protected void onSuccessfullyFinish(Product targetProduct) {
        this.parentWindow.close();

        if (this.openTargetProductInApplication) {
            this.appContext.getProductManager().addProduct(targetProduct);
        }
    }

    @Override
    protected void onFailed(Exception exception) {
        String message;
        if (exception instanceof OperatorInitializeException) {
            message = "Failed to initialize the operator.";
        } else {
            message = "Failed to execute the operator.";
        }
        this.parentWindow.showErrorDialog(message, "Operator execution");
    }
}
