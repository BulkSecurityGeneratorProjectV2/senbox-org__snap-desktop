package org.esa.snap.cloud.exploitation.platform.topology;

import org.esa.snap.cloud.exploitation.platform.ServerCredentials;
import org.esa.snap.cloud.exploitation.platform.loading.CustomFileChooser;
import org.esa.snap.cloud.exploitation.platform.loading.SwingUtils;
import org.esa.snap.ui.UIUtils;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

/**
 * Created by jcoravu on 9/1/2019.
 */
public class RemoteTopologyPanel extends JPanel {

    private final Window parentWindow;
    private final JTextField sharedFolderURLTextField;
    private final JTextField sharedFolderUsernameTextField;
    private final JPasswordField sharedFolderPasswordTextField;
    private final JList<ServerCredentials> remoteMachinesList;

    public RemoteTopologyPanel(Window parentWindow, Insets defaultTextFieldMargins, Insets defaultListItemMargins) {
        this.parentWindow = parentWindow;

        this.sharedFolderURLTextField = new JTextField();
        this.sharedFolderURLTextField.setMargin(defaultTextFieldMargins);

        this.sharedFolderUsernameTextField = new JTextField();
        this.sharedFolderUsernameTextField.setMargin(defaultTextFieldMargins);

        this.sharedFolderPasswordTextField = new JPasswordField();
        this.sharedFolderPasswordTextField.setMargin(defaultTextFieldMargins);

        this.remoteMachinesList = new JList<ServerCredentials>(new DefaultListModel<ServerCredentials>());
        this.remoteMachinesList.setVisibleRowCount(15);
        this.remoteMachinesList.setCellRenderer(new OperatingSystemLabelListCellRenderer(defaultListItemMargins));
    }

    public JList<ServerCredentials> getRemoteMachinesList() {
        return remoteMachinesList;
    }

    public JPasswordField getSharedFolderPasswordTextField() {
        return sharedFolderPasswordTextField;
    }

    public JTextField getSharedFolderURLTextField() {
        return sharedFolderURLTextField;
    }

    public JTextField getSharedFolderUsernameTextField() {
        return sharedFolderUsernameTextField;
    }

    public void addComponents(int gapBetweenColumns, int gapBetweenRows, boolean addToolbarButtons) {
        setLayout(new GridBagLayout());

        int textFieldPreferredHeight = this.sharedFolderURLTextField.getPreferredSize().height;

        ActionListener browseSharedFolderButtonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                selectSharedFolder();
            }
        };
        JButton browseButton = SwingUtils.buildBrowseButton(browseSharedFolderButtonListener, textFieldPreferredHeight);

        GridBagConstraints c = SwingUtils.buildConstraints(0, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, 0);
        add(new JLabel("Shared folder URL"), c);
        c = SwingUtils.buildConstraints(1, 0, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        add(this.sharedFolderURLTextField, c);
        c = SwingUtils.buildConstraints(2, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        add(browseButton, c);

        c = SwingUtils.buildConstraints(0, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Username"), c);
        c = SwingUtils.buildConstraints(1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        add(this.sharedFolderUsernameTextField, c);

        c = SwingUtils.buildConstraints(0, 2, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Password"), c);
        c = SwingUtils.buildConstraints(1, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        add(this.sharedFolderPasswordTextField, c);

        c = SwingUtils.buildConstraints(0, 3, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, 0);
        add(new JLabel("Remote machines"), c);

        int columnSpan = 2;
        if (addToolbarButtons) {
            columnSpan = 1;
            ActionListener addButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    addServerCredentialsButtonPressed();
                }
            };
            ActionListener editButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    editServerCredentialsButtonPressed();
                }
            };
            ActionListener removeButtonListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    removeServerCredentialsButtonPressed();
                }
            };
            JPanel remoteMachinesButtonsPanel = buildVerticalButtonsPanel(addButtonListener, editButtonListener, removeButtonListener, textFieldPreferredHeight, gapBetweenRows);

            c = SwingUtils.buildConstraints(2, 3, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, gapBetweenColumns);
            add(remoteMachinesButtonsPanel, c);
        }

        c = SwingUtils.buildConstraints(1, 3, GridBagConstraints.BOTH, GridBagConstraints.WEST, columnSpan, 1, gapBetweenRows, gapBetweenColumns);
        add(new JScrollPane(this.remoteMachinesList), c);
    }

    private void addServerCredentialsButtonPressed() {
        EditRemoteMachineCredentialsDialog dialog = new EditRemoteMachineCredentialsDialog(this.parentWindow, null) {
            @Override
            protected void successfullyCloseDialog(ServerCredentials oldSSHServerCredentials, ServerCredentials newSSHServerCredentials) {
                super.successfullyCloseDialog(oldSSHServerCredentials, newSSHServerCredentials);

                addSSHServerCredentialItem(newSSHServerCredentials);
            }
        };
        dialog.show();
    }

    private void addSSHServerCredentialItem(ServerCredentials newSSHServerCredentials) {
        DefaultListModel<ServerCredentials> model = (DefaultListModel<ServerCredentials>)this.remoteMachinesList.getModel();
        model.addElement(newSSHServerCredentials);
    }

    private void editSSHServerCredentialItem(ServerCredentials oldSSHServerCredentials, ServerCredentials newSSHServerCredentials) {
        DefaultListModel<ServerCredentials> model = (DefaultListModel<ServerCredentials>)this.remoteMachinesList.getModel();
        for (int i=0; i<model.size(); i++) {
            ServerCredentials existingServer = model.getElementAt(i);
            if (existingServer == oldSSHServerCredentials) {
                model.setElementAt(newSSHServerCredentials, i);
                break;
            }
        }
    }

    private void editServerCredentialsButtonPressed() {
        ServerCredentials selectedSSHServerCredentials = this.remoteMachinesList.getSelectedValue();
        if (selectedSSHServerCredentials != null) {
            EditRemoteMachineCredentialsDialog dialog = new EditRemoteMachineCredentialsDialog(this.parentWindow, selectedSSHServerCredentials) {
                @Override
                protected void successfullyCloseDialog(ServerCredentials oldSSHServerCredentials, ServerCredentials newSSHServerCredentials) {
                    super.successfullyCloseDialog(oldSSHServerCredentials, newSSHServerCredentials);

                    editSSHServerCredentialItem(oldSSHServerCredentials, newSSHServerCredentials);
                }
            };
            dialog.show();
        }
    }

    private void removeServerCredentialsButtonPressed() {
        int selectedIndex = this.remoteMachinesList.getSelectedIndex();
        if (selectedIndex >= 0) {
            DefaultListModel<ServerCredentials> model = (DefaultListModel<ServerCredentials>)this.remoteMachinesList.getModel();
            model.removeElementAt(selectedIndex);
        }
    }

    private void selectSharedFolder() {
        File folder = new File(this.sharedFolderURLTextField.getText());
        CustomFileChooser fileChooser = CustomFileChooser.buildFileChooser("Select folder", false, JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setCurrentDirectory(folder);
        int result = fileChooser.showDialog(this.parentWindow, "Select");
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFolder = fileChooser.getSelectedFile();
            this.sharedFolderURLTextField.setText(selectedFolder.getAbsolutePath());
        }
    }

    private static JButton buildButton(String resourceImagePath, ActionListener buttonListener, Dimension buttonSize) {
        ImageIcon icon = UIUtils.loadImageIcon(resourceImagePath);
        JButton button = new JButton(icon);
        button.setFocusable(false);
        button.addActionListener(buttonListener);
        button.setPreferredSize(buttonSize);
        button.setMinimumSize(buttonSize);
        button.setMaximumSize(buttonSize);
        return button;
    }

    private static JPanel buildVerticalButtonsPanel(ActionListener addButtonListener, ActionListener editButtonListener, ActionListener removeButtonListener,
                                                    int textFieldPreferredHeight, int gapBetweenRows) {

        Dimension buttonSize = new Dimension(textFieldPreferredHeight, textFieldPreferredHeight);

        JPanel verticalButtonsPanel = new JPanel();
        verticalButtonsPanel.setLayout(new BoxLayout(verticalButtonsPanel, BoxLayout.Y_AXIS));

        JButton addButton = buildButton("icons/Add16.png", addButtonListener, buttonSize);
        verticalButtonsPanel.add(addButton);

        verticalButtonsPanel.add(Box.createVerticalStrut(gapBetweenRows));

        JButton editButton = buildButton("icons/Edit16.gif", editButtonListener, buttonSize);
        verticalButtonsPanel.add(editButton);

        verticalButtonsPanel.add(Box.createVerticalStrut(gapBetweenRows));

        JButton removeButton = buildButton("icons/Remove16.png", removeButtonListener, buttonSize);
        verticalButtonsPanel.add(removeButton);

        return verticalButtonsPanel;
    }
}
