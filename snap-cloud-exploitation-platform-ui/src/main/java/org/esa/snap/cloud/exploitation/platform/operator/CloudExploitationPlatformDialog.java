package org.esa.snap.cloud.exploitation.platform.operator;

import com.bc.ceres.binding.*;
import com.bc.ceres.binding.dom.DomElement;
import com.bc.ceres.swing.binding.Binding;
import com.bc.ceres.swing.binding.BindingContext;
import com.bc.ceres.swing.binding.internal.ListSelectionAdapter;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.SystemUtils;
import org.esa.snap.cloud.exploitation.platform.*;
import org.esa.snap.cloud.exploitation.platform.loading.*;
import org.esa.snap.cloud.exploitation.platform.topology.*;
import org.esa.snap.core.gpf.GPF;
import org.esa.snap.core.gpf.OperatorSpi;
import org.esa.snap.core.gpf.descriptor.OperatorDescriptor;
import org.esa.snap.core.gpf.ui.*;
import org.esa.snap.ui.AppContext;
import org.esa.snap.ui.UIUtils;
import org.esa.snap.ui.tool.ToolButtonFactory;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.io.File;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by jcoravu on 24/12/2018.
 */
public class CloudExploitationPlatformDialog extends AbstractModalDialog {

    private static final String SOURCE_PRODUCT_FILES_PROPERTY = "sourceProductFiles";
    private static final String REMOTE_MACHINES_PROPERTY = "remoteMachines";
    private static final String MASTER_SHARED_FOLDER_URL_PROPERTY = "masterSharedFolderURL";
    private static final String MASTER_SHARED_FOLDER_USERNAME_PROPERTY = "masterSharedFolderUsername";
    private static final String MASTER_SHARED_FOLDER_PASSWORD_PROPERTY = "masterSharedFolderPassword";
    public static final String LOCAL_SHARED_FOLDER_PATH_PROPERTY = "localSharedFolderPath";
    public static final String LOCAL_PASSWORD_PROPERTY = "localPassword";
    private static final String SLAVE_GRAPH_FILE_PATH_PROPERTY = "slaveGraphFilePath";
    private static final String MASTER_GRAPH_FILE_PATH_PROPERTY = "masterGraphFilePath";
    private static final String TARGET_PRODUCT_FILE_PATH_PROPERTY = "targetProductFilePath";
    private static final String TARGET_PRODUCT_FOLDER_PATH_PROPERTY = "targetProductFolderPath";
    private static final String TARGET_PRODUCT_FILE_NAME_PROPERTY = "targetProductFileName";
    private static final String TARGET_PRODUCT_FORMAT_NAME_PROPERTY = "targetProductFormatName";
    private static final String CONTINUE_ON_FAILURE_NAME_PROPERTY = "continueOnFailure";
    private static final String LIST_VALUE_SET_PROPERTY = "valueSet";

    private final AppContext appContext;
    private final BindingContext bindingContext;
    private final OperatorDescriptor operatorDescriptor;
    private final OperatorParameterSupport parameterSupport;

    private JTextField slaveGraphFilePathTextField;
    private JTextField targetGraphFilePathTextField;
    private JList<File> sourceProductsList;
    private TargetProductSelector targetProductSelector;
    private RemoteTopologyPanel remoteTopologyPanel;
    private JCheckBox continueOnFailureCheckBox;
    private LocalMachineLinuxMountFolder localLinuxMachineMountFolder;
    private Boolean localWindowsSharedDrive;

    public CloudExploitationPlatformDialog(AppContext appContext, Window parent, String title, boolean isModal) {
        super(parent, title, isModal);

        this.appContext = appContext;

        String operatorName = OperatorSpi.getOperatorAlias(CloudExploitationPlatformOp.class);
        OperatorSpi operatorSpi = GPF.getDefaultInstance().getOperatorSpiRegistry().getOperatorSpi(operatorName);
        if (operatorSpi == null) {
            throw new IllegalArgumentException("No SPI found for operator name '" + operatorName + "'.");
        }

        ParameterUpdater parameterUpdater = new ParameterUpdater() {
            @Override
            public void handleParameterSaveRequest(Map<String, Object> parameterMap) {
            }

            @Override
            public void handleParameterLoadRequest(Map<String, Object> parameterMap) {
                File[] files = (File[]) parameterMap.get(SOURCE_PRODUCT_FILES_PROPERTY);
                setListItems(files, SOURCE_PRODUCT_FILES_PROPERTY);

                RemoteMachineCredentials[] servers = (RemoteMachineCredentials[]) parameterMap.get(REMOTE_MACHINES_PROPERTY);
                setListItems(servers, REMOTE_MACHINES_PROPERTY);
            }
        };

        Map<String, Object> parameterMap = new HashMap<String, Object>();
        PropertySet propertySet = PropertyContainer.createMapBacked(parameterMap, CloudExploitationPlatformItem.class);
        propertySet.getDescriptor(REMOTE_MACHINES_PROPERTY).setConverter(new RemoteMachineCredentialsConverter());
        propertySet.getDescriptor(SOURCE_PRODUCT_FILES_PROPERTY).setConverter(new FilesConverter());
        propertySet.setDefaultValues();

        this.operatorDescriptor = operatorSpi.getOperatorDescriptor();
        this.parameterSupport = new OperatorParameterSupport(this.operatorDescriptor, propertySet, parameterMap, parameterUpdater) {
            @Override
            public void fromDomElement(DomElement parametersElement) throws ValidationException, ConversionException {
                Property sourceProductFilesProperty = getPropertySet().getProperty(SOURCE_PRODUCT_FILES_PROPERTY);
                sourceProductFilesProperty.getDescriptor().setAttribute(LIST_VALUE_SET_PROPERTY, null);

                Property remoteMachinesProperty = getPropertySet().getProperty(REMOTE_MACHINES_PROPERTY);
                remoteMachinesProperty.getDescriptor().setAttribute(LIST_VALUE_SET_PROPERTY, null);

                super.fromDomElement(parametersElement);
            }
        };
        this.bindingContext = new BindingContext(this.parameterSupport.getPropertySet());

        JDialog dialog = getJDialog();
        OperatorMenu operatorMenu = new OperatorMenu(dialog, this.operatorDescriptor, this.parameterSupport, appContext, getHelpID());
        dialog.setJMenuBar(operatorMenu.createDefaultMenu());
    }

    @Override
    protected void onAboutToShow() {
        JDialog dialog = getJDialog();
        dialog.setMinimumSize(new Dimension(600, 560));

        ILoadingIndicator loadingIndicator = getLoadingIndicator();
        int threadId = getNewCurrentThreadId();
        ReadRemoteTopologyTimerRunnable runnable = new ReadRemoteTopologyTimerRunnable(this, loadingIndicator, threadId) {
            @Override
            protected void onSuccessfullyFinish(RemoteTopology remoteTopology) {
                onFinishReadingRemoteTopoloy(remoteTopology);
            }
        };
        runnable.executeAsync();
    }

    @Override
    public void close() {
        boolean threadStarted = false;
        if (CloudExploitationPlatformOp.isLinuxOrMacOperatingSystem()) {
            if (this.localLinuxMachineMountFolder != null) {
                ILoadingIndicator loadingIndicator = getLoadingIndicator();
                int threadId = getNewCurrentThreadId();
                String localSharedFolderPath = getLocalSharedFolderPath();
                String localPassword = getLocalPassword();
                boolean localSharedFolderCreated = this.localLinuxMachineMountFolder.isSharedFolderCreated();
                UnmountLinuxLocalFolderTimerRunnable runnable = new UnmountLinuxLocalFolderTimerRunnable(loadingIndicator, threadId, localSharedFolderPath,
                                            localPassword, localSharedFolderCreated) {
                    @Override
                    protected void onSuccessfullyFinish(Void result) {
                        closeDialogWindow();
                    }

                    @Override
                    protected void onFailed(Exception exception) {
                        closeDialogWindow();
                    }
                };
                runnable.executeAsync();
                threadStarted = true;
            }
        } else if (CloudExploitationPlatformOp.isWindowsOperatingSystem()) {
            String localSharedDrive = getLocalSharedFolderPath();
            if (!StringUtils.isBlank(localSharedDrive) && this.localWindowsSharedDrive != null && this.localWindowsSharedDrive.booleanValue()) {
                ILoadingIndicator loadingIndicator = getLoadingIndicator();
                int threadId = getNewCurrentThreadId();
                UnmountWindowsLocalDriveTimerRunnable runnable = new UnmountWindowsLocalDriveTimerRunnable(loadingIndicator, threadId, localSharedDrive) {
                    @Override
                    protected void onSuccessfullyFinish(Void result) {
                        closeDialogWindow();
                    }

                    @Override
                    protected void onFailed(Exception exception) {
                        closeDialogWindow();
                    }
                };
                runnable.executeAsync();
                threadStarted = true;
            }
        } else {
            throw new UnsupportedOperationException("Unsupported operating system '" + SystemUtils.OS_NAME + "'.");
        }
        if (!threadStarted) {
            super.close();
        }
    }

    @Override
    protected void setEnabledComponentsWhileLoading(boolean enabled) {
        super.setEnabledComponentsWhileLoading(enabled);

        this.remoteTopologyPanel.setSharedComponentsEnabled(false);
    }

    @Override
    protected JPanel buildButtonsPanel(ActionListener cancelActionListener) {
        ActionListener runActionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                runButtonPressed();
            }
        };
        return buildButtonsPanel("Run", runActionListener, "Cancel", cancelActionListener);
    }

    @Override
    protected JPanel buildContentPanel(int gapBetweenColumns, int gapBetweenRows) {
        Insets defaultTextFieldMargins = buildDefaultTextFieldMargins();
        Insets defaultListItemMargins = buildDefaultListItemMargins();
        createComponents(defaultTextFieldMargins, defaultListItemMargins);

        int textFieldPreferredHeight = getTextFieldPreferredHeight();

        this.remoteTopologyPanel.addComponents(gapBetweenColumns, gapBetweenRows, false, false);
        this.remoteTopologyPanel.setBorder(new TitledBorder("Remote topology"));
        this.remoteTopologyPanel.setSharedComponentsEnabled(false);

        JPanel sourceProductsPanel = buildSourceProductsPanel(gapBetweenColumns, gapBetweenRows, textFieldPreferredHeight);

        ActionListener slaveGraphBrowseButtonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                selectSlaveGraphFile();
            }
        };
        JPanel slaveGraphPanel = buildGraphFilePanel(gapBetweenColumns, gapBetweenRows, this.slaveGraphFilePathTextField, slaveGraphBrowseButtonListener, textFieldPreferredHeight);

        JPanel targetProductPanel = buildTargetProductPanel(gapBetweenColumns, gapBetweenRows, defaultTextFieldMargins, defaultListItemMargins, textFieldPreferredHeight);

        JPanel contentPanel = new JPanel(new GridBagLayout());

        GridBagConstraints c = SwingUtils.buildConstraints(0, 0, GridBagConstraints.BOTH, GridBagConstraints.NORTHWEST, 1, 1, 0, 0);
        contentPanel.add(this.remoteTopologyPanel, c);

        c = SwingUtils.buildConstraints(0, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, 0);
        c.insets.left = 5;
        c.insets.right = 5;
        contentPanel.add(slaveGraphPanel, c);

        c = SwingUtils.buildConstraints(0, 2, GridBagConstraints.BOTH, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, 0);
        contentPanel.add(sourceProductsPanel, c);

        c = SwingUtils.buildConstraints(0, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, 0);
        contentPanel.add(targetProductPanel, c);

        computePanelFirstColumn(contentPanel);

        return contentPanel;
    }

    private int getTextFieldPreferredHeight() {
        return this.slaveGraphFilePathTextField.getPreferredSize().height;
    }

    private void createComponents(Insets defaultTextFieldMargins, Insets defaultListItemMargins) {
        if (CloudExploitationPlatformOp.isLinuxOrMacOperatingSystem()) {
            this.remoteTopologyPanel = new LinuxRemoteTopologyPanel(getJDialog(), defaultTextFieldMargins, defaultListItemMargins);
        } else if (CloudExploitationPlatformOp.isWindowsOperatingSystem()) {
            this.remoteTopologyPanel = new WindowsRemoteTopologyPanel(getJDialog(), defaultTextFieldMargins, defaultListItemMargins);
        } else {
            throw new UnsupportedOperationException("Unsupported operating system '" + SystemUtils.OS_NAME + "'.");
        }

        this.remoteTopologyPanel.getRemoteSharedFolderURLTextField().setColumns(70);
        this.bindingContext.bind(MASTER_SHARED_FOLDER_URL_PROPERTY, this.remoteTopologyPanel.getRemoteSharedFolderURLTextField());

        this.bindingContext.bind(MASTER_SHARED_FOLDER_USERNAME_PROPERTY, this.remoteTopologyPanel.getRemoteUsernameTextField());

        this.bindingContext.bind(MASTER_SHARED_FOLDER_PASSWORD_PROPERTY, this.remoteTopologyPanel.getRemotePasswordTextField());

        this.bindingContext.bind(LOCAL_SHARED_FOLDER_PATH_PROPERTY, this.remoteTopologyPanel.getLocalSharedFolderPathTextField());

        JPasswordField localPasswordTextField = this.remoteTopologyPanel.getLocalPasswordTextField();
        if (localPasswordTextField != null) {
            localPasswordTextField.setMargin(defaultTextFieldMargins);
            this.bindingContext.bind(LOCAL_PASSWORD_PROPERTY, localPasswordTextField);
        }

        this.bindingContext.bind(REMOTE_MACHINES_PROPERTY, new ListSelectionAdapter(this.remoteTopologyPanel.getRemoteMachinesList()));
        this.remoteTopologyPanel.getRemoteMachinesList().setVisibleRowCount(4);

        this.slaveGraphFilePathTextField = new JTextField();
        this.slaveGraphFilePathTextField.setMargin(defaultTextFieldMargins);
        this.bindingContext.bind(SLAVE_GRAPH_FILE_PATH_PROPERTY, this.slaveGraphFilePathTextField);

        this.targetGraphFilePathTextField = new JTextField();
        this.targetGraphFilePathTextField.setMargin(defaultTextFieldMargins);
        this.bindingContext.bind(MASTER_GRAPH_FILE_PATH_PROPERTY, this.targetGraphFilePathTextField);

        this.continueOnFailureCheckBox = new JCheckBox("Continue when a remote machine fails");
        this.continueOnFailureCheckBox.setMargin(new Insets(0, 0, 0, 0));
        Binding binding = this.bindingContext.bind(CONTINUE_ON_FAILURE_NAME_PROPERTY, this.continueOnFailureCheckBox);
        binding.setPropertyValue(this.continueOnFailureCheckBox.isSelected());

        this.sourceProductsList = new JList<File>(new DefaultListModel<File>());
        LabelListCellRenderer<File> sourceProductsRenderer = new LabelListCellRenderer<File>(buildDefaultListItemMargins()) {
            @Override
            protected String getItemDisplayText(File value) {
                return value.getAbsolutePath();
            }
        };
        this.sourceProductsList.setCellRenderer(sourceProductsRenderer);
        this.sourceProductsList.setVisibleRowCount(4);
        this.bindingContext.bind(SOURCE_PRODUCT_FILES_PROPERTY, new ListSelectionAdapter(this.sourceProductsList));

        TargetProductSelectorModel model = new TargetProductSelectorModel();
        this.targetProductSelector = new TargetProductSelector(model, false);
    }

    private JPanel buildSourceProductsPanel(int gapBetweenColumns, int gapBetweenRows, int textFieldPreferredHeight) {
        Dimension buttonSize = new Dimension(textFieldPreferredHeight, textFieldPreferredHeight);
        ActionListener addSourceProductsButtonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                showDialogToSelectSourceProducts();
            }
        };
        JButton addSourceProductButton = buildButton("icons/Plus16.gif", addSourceProductsButtonListener, buttonSize);
        ActionListener removeSourceProductsButtonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                removeSelectedSourceProducts();
            }
        };
        JButton removeSourceProductButton = buildButton("icons/Minus16.gif", removeSourceProductsButtonListener, buttonSize);

        JPanel sourceProductsPanel = new JPanel(new GridBagLayout());
        sourceProductsPanel.setBorder(new TitledBorder("Source products"));

        GridBagConstraints c = SwingUtils.buildConstraints(1, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        sourceProductsPanel.add(addSourceProductButton, c);

        c = SwingUtils.buildConstraints(2, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        sourceProductsPanel.add(removeSourceProductButton, c);

        c = SwingUtils.buildConstraints(0, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1, 1, gapBetweenRows, 0);
        sourceProductsPanel.add(new JLabel("Products"), c);

        c = SwingUtils.buildConstraints(1, 1, GridBagConstraints.BOTH, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        sourceProductsPanel.add(new JScrollPane(this.sourceProductsList), c);

        return sourceProductsPanel;
    }

    private JPanel buildTargetProductPanel(int gapBetweenColumns, int gapBetweenRows, Insets defaultTextFieldMargins, Insets defaultListItemMargins, int textFieldPreferredHeight) {
        ActionListener materGraphBrowseButtonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                selectMasterGraphFile();
            }
        };
        JButton browseButton = SwingUtils.buildBrowseButton(materGraphBrowseButtonListener, textFieldPreferredHeight);

        Insets noMargins = new Insets(0, 0, 0, 0);

        JCheckBox saveToFileCheckBox = this.targetProductSelector.getSaveToFileCheckBox();
        saveToFileCheckBox.setMargin(noMargins);

        JCheckBox openInAppCheckBox = this.targetProductSelector.getOpenInAppCheckBox();
        openInAppCheckBox.setMargin(noMargins);

        JTextField targetProductFolderPathTextField = this.targetProductSelector.getProductDirTextField();
        targetProductFolderPathTextField.setMargin(defaultTextFieldMargins);
        this.bindingContext.bind(TARGET_PRODUCT_FOLDER_PATH_PROPERTY, targetProductFolderPathTextField);

        JTextField targetProductNameTextField = this.targetProductSelector.getProductNameTextField();
        targetProductNameTextField.setMargin(defaultTextFieldMargins);
        this.bindingContext.bind(TARGET_PRODUCT_FILE_NAME_PROPERTY, targetProductNameTextField);

        JButton targetProductFolderBrowserButton = this.targetProductSelector.getProductDirChooserButton();
        Action action = new AbstractAction("...") {
            @Override
            public void actionPerformed(ActionEvent event) {
                selectTargetProductFolderPath();
            }
        };
        targetProductFolderBrowserButton.setAction(action);
        Dimension preferredSize = new Dimension(textFieldPreferredHeight, textFieldPreferredHeight);
        targetProductFolderBrowserButton.setPreferredSize(preferredSize);
        targetProductFolderBrowserButton.setMinimumSize(preferredSize);
        targetProductFolderBrowserButton.setMaximumSize(preferredSize);

        JComboBox<String> formatNameComboBox = this.targetProductSelector.getFormatNameComboBox();
        Dimension formatNameComboBoxSize = formatNameComboBox.getPreferredSize();
        formatNameComboBoxSize.height = textFieldPreferredHeight;
        formatNameComboBox.setPreferredSize(formatNameComboBoxSize);
        LabelListCellRenderer<String> renderer = new LabelListCellRenderer<String>(defaultListItemMargins) {
            @Override
            protected String getItemDisplayText(String value) {
                return value;
            }
        };
        formatNameComboBox.setMaximumRowCount(5);
        formatNameComboBox.setRenderer(renderer);
        formatNameComboBox.setBackground(new Color(0, 0, 0, 0)); // set the transparent color
        formatNameComboBox.setOpaque(true);
        this.bindingContext.bind(TARGET_PRODUCT_FORMAT_NAME_PROPERTY, formatNameComboBox);

        JPanel targetProductPanel = new JPanel(new GridBagLayout());
        targetProductPanel.setBorder(new TitledBorder("Target product"));

        GridBagConstraints c = SwingUtils.buildConstraints(0, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, 0);
        targetProductPanel.add(new JLabel("Master graph file"), c);
        c = SwingUtils.buildConstraints(1, 0, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        targetProductPanel.add(this.targetGraphFilePathTextField, c);
        c = SwingUtils.buildConstraints(2, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        targetProductPanel.add(browseButton, c);

        c = SwingUtils.buildConstraints(0, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        targetProductPanel.add(this.targetProductSelector.getProductNameLabel(), c);
        c = SwingUtils.buildConstraints(1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 2, 1, gapBetweenRows, gapBetweenColumns);
        targetProductPanel.add(targetProductNameTextField, c);

        c = SwingUtils.buildConstraints(0, 2, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        targetProductPanel.add(saveToFileCheckBox, c);
        c = SwingUtils.buildConstraints(1, 2, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, gapBetweenColumns);
        targetProductPanel.add(formatNameComboBox, c);

        c = SwingUtils.buildConstraints(0, 3, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, 0);
        targetProductPanel.add(this.targetProductSelector.getProductDirLabel(), c);
        c = SwingUtils.buildConstraints(1, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1, 1, gapBetweenRows, gapBetweenColumns);
        targetProductPanel.add(targetProductFolderPathTextField, c);
        c = SwingUtils.buildConstraints(2, 3, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, gapBetweenRows, gapBetweenColumns);
        targetProductPanel.add(targetProductFolderBrowserButton, c);

        c = SwingUtils.buildConstraints(0, 4, GridBagConstraints.NONE, GridBagConstraints.WEST, 3, 1, gapBetweenRows, 0);
        targetProductPanel.add(openInAppCheckBox, c);

        return targetProductPanel;
    }

    private JPanel buildGraphFilePanel(int gapBetweenColumns, int gapBetweenRows, JTextField filePathTextField, ActionListener actionListener, int textFieldPreferredHeight) {
        JButton browseButton = SwingUtils.buildBrowseButton(actionListener, textFieldPreferredHeight);

        JPanel panel = new JPanel(new GridBagLayout());

        GridBagConstraints c = SwingUtils.buildConstraints(0, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, 0);
        panel.add(new JLabel("Slave graph file"), c);

        c = SwingUtils.buildConstraints(1, 0, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        panel.add(filePathTextField, c);

        c = SwingUtils.buildConstraints(2, 0, GridBagConstraints.NONE, GridBagConstraints.WEST, 1, 1, 0, gapBetweenColumns);
        panel.add(browseButton, c);

        c = SwingUtils.buildConstraints(0, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 3, 1, gapBetweenRows, 0);
        panel.add(this.continueOnFailureCheckBox, c);

        return panel;
    }

    private void runButtonPressed() {
        Map<String, Object> parameterMap = this.parameterSupport.getParameterMap();

        String masterSharedFolderURL = (String)parameterMap.get(MASTER_SHARED_FOLDER_URL_PROPERTY);
        String masterSharedFolderUsername = (String)parameterMap.get(MASTER_SHARED_FOLDER_USERNAME_PROPERTY);
        String masterSharedFolderPassword = (String)parameterMap.get(MASTER_SHARED_FOLDER_PASSWORD_PROPERTY);
        String localSharedFolderPath = (String)parameterMap.get(LOCAL_SHARED_FOLDER_PATH_PROPERTY);
        String localPassword = (String)parameterMap.get(LOCAL_PASSWORD_PROPERTY);
        String slaveGraphFilePath = (String)parameterMap.get(SLAVE_GRAPH_FILE_PATH_PROPERTY);
        String masterGraphFilePath = (String)parameterMap.get(MASTER_GRAPH_FILE_PATH_PROPERTY);
        String targetProductFolderPath = (String)parameterMap.get(TARGET_PRODUCT_FOLDER_PATH_PROPERTY);
        String targetProductFileName = (String)parameterMap.get(TARGET_PRODUCT_FILE_NAME_PROPERTY);
        String targetProductFormatName = (String)parameterMap.get(TARGET_PRODUCT_FORMAT_NAME_PROPERTY);
        Boolean continueOnFailure = (Boolean)parameterMap.get(CONTINUE_ON_FAILURE_NAME_PROPERTY);
        File[] selectedSourceProducts = (File[])parameterMap.get(SOURCE_PRODUCT_FILES_PROPERTY);
        RemoteMachineCredentials[] selectedRemoteMachines = (RemoteMachineCredentials[])parameterMap.get(REMOTE_MACHINES_PROPERTY);

        if (StringUtils.isBlank(masterSharedFolderURL)) {
            showErrorDialog("Enter the shared folder URL.");
            this.remoteTopologyPanel.getRemoteSharedFolderURLTextField().requestFocus();
        } else {
                {
                if (StringUtils.isBlank(masterSharedFolderUsername)) {
                    showErrorDialog("Enter the user name of the machine containing the shared folder URL.");
                    this.remoteTopologyPanel.getRemoteUsernameTextField().requestFocus();
                } else if (StringUtils.isBlank(masterSharedFolderPassword)) {
                    showErrorDialog("Enter the password of the machine containing the shared folder URL.");
                    this.remoteTopologyPanel.getRemotePasswordTextField().requestFocus();
                } else {
                    Property property = this.bindingContext.getPropertySet().getProperty(REMOTE_MACHINES_PROPERTY);
                    ValueSet valueSet = (ValueSet) property.getDescriptor().getAttribute(LIST_VALUE_SET_PROPERTY);
                    if (valueSet == null) {
                        showErrorDialog("Add at least one remote machine.");
                        this.remoteTopologyPanel.getRemoteMachinesList().requestFocus();
                    } else if (selectedRemoteMachines == null || selectedRemoteMachines.length == 0) {
                        showErrorDialog("Select the remote machines.");
                        this.remoteTopologyPanel.getRemoteMachinesList().requestFocus();
                    } else if (StringUtils.isBlank(slaveGraphFilePath)) {
                        showErrorDialog("Enter the slave graph file to be processed on the remote machines.");
                        this.slaveGraphFilePathTextField.requestFocus();
                    } else {
                        property = this.bindingContext.getPropertySet().getProperty(SOURCE_PRODUCT_FILES_PROPERTY);
                        valueSet = (ValueSet) property.getDescriptor().getAttribute(LIST_VALUE_SET_PROPERTY);
                        if (valueSet == null) {
                            showErrorDialog("Add at least one source product.");
                            this.sourceProductsList.requestFocus();
                        } else if (selectedSourceProducts == null || selectedSourceProducts.length == 0) {
                            showErrorDialog("Select the source products to be processed on the remote machines.");
                            this.sourceProductsList.requestFocus();
                        } else {
                            if (StringUtils.isBlank(masterGraphFilePath)) {
                                showErrorDialog("Enter the master graph file to be processed.");
                                this.targetGraphFilePathTextField.requestFocus();
                            } else if (StringUtils.isBlank(targetProductFolderPath)) {
                                showErrorDialog("Enter the target product folder path.");
                                this.targetProductSelector.getProductDirTextField().requestFocus();
                            } else if (StringUtils.isBlank(targetProductFileName)) {
                                showErrorDialog("Enter the target product name.");
                                this.targetProductSelector.getProductNameTextField().requestFocus();
                            } else if (StringUtils.isBlank(targetProductFormatName)) {
                                showErrorDialog("Select the target product format name.");
                                this.targetProductSelector.getFormatNameComboBox().requestFocus();
                            } else {
                                this.targetProductSelector.getModel().setProductName(targetProductFileName);
                                this.targetProductSelector.getModel().setProductDir(new File(targetProductFolderPath));
                                File targetProductFile = this.targetProductSelector.getModel().getProductFile();

                                String[] selectedFilePaths = new String[selectedSourceProducts.length];
                                for (int i=0; i<selectedSourceProducts.length; i++) {
                                    selectedFilePaths[i] = selectedSourceProducts[i].getAbsolutePath();
                                }

                                Map<String, Object> parameterMapNew = new HashMap<String, Object>();
                                parameterMapNew.put(MASTER_SHARED_FOLDER_URL_PROPERTY, masterSharedFolderURL);
                                parameterMapNew.put(MASTER_SHARED_FOLDER_USERNAME_PROPERTY, masterSharedFolderUsername);
                                parameterMapNew.put(MASTER_SHARED_FOLDER_PASSWORD_PROPERTY, masterSharedFolderPassword);
                                parameterMapNew.put(LOCAL_SHARED_FOLDER_PATH_PROPERTY, localSharedFolderPath);
                                parameterMapNew.put(LOCAL_PASSWORD_PROPERTY, localPassword);
                                parameterMapNew.put(SLAVE_GRAPH_FILE_PATH_PROPERTY, slaveGraphFilePath);
                                parameterMapNew.put(MASTER_GRAPH_FILE_PATH_PROPERTY, masterGraphFilePath);
                                parameterMapNew.put(TARGET_PRODUCT_FILE_PATH_PROPERTY, targetProductFile.getAbsolutePath());
                                parameterMapNew.put(TARGET_PRODUCT_FORMAT_NAME_PROPERTY, targetProductFormatName);
                                parameterMapNew.put(SOURCE_PRODUCT_FILES_PROPERTY, selectedFilePaths);
                                parameterMapNew.put(REMOTE_MACHINES_PROPERTY, selectedRemoteMachines);
                                parameterMapNew.put(CONTINUE_ON_FAILURE_NAME_PROPERTY, continueOnFailure);

                                runOperatorAsync(parameterMapNew);
                            }
                        }
                    }
                }
            }
        }
    }

    private void runOperatorAsync(Map<String, Object> parametersMap) {
        ILoadingIndicator loadingIndicator = getLoadingIndicator();
        int threadId = getNewCurrentThreadId();
        boolean openTargetProductInApplication = this.targetProductSelector.getOpenInAppCheckBox().isSelected();

        CloudExploitationPlatformTimerRunnable runnable = new CloudExploitationPlatformTimerRunnable(this.appContext, this,
                loadingIndicator, threadId, parametersMap, openTargetProductInApplication, this.localLinuxMachineMountFolder, this.localWindowsSharedDrive) {

            @Override
            protected void onSuccessfullyUnmountLocalFolder() {
                CloudExploitationPlatformDialog.this.localLinuxMachineMountFolder = null;
                CloudExploitationPlatformDialog.this.localWindowsSharedDrive = null;
            }
        };
        runnable.executeAsync();
    }

    private void onFinishReadingRemoteTopoloy(RemoteTopology remoteTopology) {
        try {
            Property property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_URL_PROPERTY);
            property.setValue(remoteTopology.getRemoteSharedFolderURL());

            property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_USERNAME_PROPERTY);
            property.setValue(remoteTopology.getRemoteUsername());

            property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_PASSWORD_PROPERTY);
            property.setValue(remoteTopology.getRemotePassword());

            if (remoteTopology.getLocalSharedFolderPath() != null) {
                property = this.bindingContext.getPropertySet().getProperty(LOCAL_SHARED_FOLDER_PATH_PROPERTY);
                property.setValue(remoteTopology.getLocalSharedFolderPath());
            }

            if (remoteTopology.getLocalPassword() != null) {
                property = this.bindingContext.getPropertySet().getProperty(LOCAL_PASSWORD_PROPERTY);
                property.setValue(remoteTopology.getLocalPassword());
            }

            RemoteMachineCredentials[] remoteMachines = new RemoteMachineCredentials[remoteTopology.getRemoteMachines().size()];
            remoteTopology.getRemoteMachines().toArray(remoteMachines);
            addListItems(remoteMachines, RemoteMachineCredentials.class, REMOTE_MACHINES_PROPERTY);
        } catch (ValidationException e) {
            throw new IllegalStateException(e);
        }
    }

    private void removeSelectedSourceProducts() {
        int[] selectedIndices = this.sourceProductsList.getSelectedIndices();
        removeListItems(selectedIndices, File.class, SOURCE_PRODUCT_FILES_PROPERTY);
    }

    private String getRemoteSharedFolderURL() {
        Property property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_URL_PROPERTY);
        return property.getValue();
    }

    private String getRemoteUsername() {
        Property property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_USERNAME_PROPERTY);
        return property.getValue();
    }

    private String getPassword() {
        Property property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_PASSWORD_PROPERTY);
        return property.getValue();
    }

    private String getLocalSharedFolderPath() {
        Property property = this.bindingContext.getPropertySet().getProperty(LOCAL_SHARED_FOLDER_PATH_PROPERTY);
        return property.getValue();
    }

    private String getLocalPassword() {
        Property property = this.bindingContext.getPropertySet().getProperty(LOCAL_PASSWORD_PROPERTY);
        return property.getValue();
    }

    private void closeDialogWindow() {
        this.localLinuxMachineMountFolder = null;
        this.localWindowsSharedDrive = null;
        super.close();
    }

    private void showDialogToSelectSourceProducts() {
        boolean mountThreadStarted = false;
        if (CloudExploitationPlatformOp.isLinuxOrMacOperatingSystem()) {
            if (this.localLinuxMachineMountFolder == null) {
                String remoteSharedFolderURL = getRemoteSharedFolderURL();
                String remoteUsername = getRemoteUsername();
                String remotePassword = getPassword();
                String localSharedFolderPath = getLocalSharedFolderPath();
                String localPassword = getLocalPassword();
                ILoadingIndicator loadingIndicator = getLoadingIndicator();
                int threadId = getNewCurrentThreadId();
                MountLinuxLocalFolderTimerRunnable runnable = new MountLinuxLocalFolderTimerRunnable(this, loadingIndicator, threadId, remoteSharedFolderURL, remoteUsername,
                                                                                                     remotePassword, localSharedFolderPath, localPassword) {

                    @Override
                    protected void onSuccessfullyFinish(LocalMachineLinuxMountFolder result) {
                        CloudExploitationPlatformDialog.this.localLinuxMachineMountFolder = result;
                        showDialogToSelectSourceProductsNew();
                    }
                };
                runnable.executeAsync();
                mountThreadStarted = true;
            }
        } else if (CloudExploitationPlatformOp.isWindowsOperatingSystem()) {
            String localSharedDrive = getLocalSharedFolderPath();
            if (!StringUtils.isBlank(localSharedDrive) && this.localWindowsSharedDrive == null) {
                String remoteSharedFolderURL = getRemoteSharedFolderURL();
                String remoteUsername = getRemoteUsername();
                String remotePassword = getPassword();
                ILoadingIndicator loadingIndicator = getLoadingIndicator();
                int threadId = getNewCurrentThreadId();
                MountWindowsLocalDriveTimerRunnable runnable = new MountWindowsLocalDriveTimerRunnable(this, loadingIndicator, threadId, remoteSharedFolderURL,
                        remoteUsername, remotePassword, localSharedDrive) {

                    @Override
                    protected void onSuccessfullyFinish(Boolean result) {
                        CloudExploitationPlatformDialog.this.localWindowsSharedDrive = result;
                        showDialogToSelectSourceProductsNew();
                    }
                };
                runnable.executeAsync();
                mountThreadStarted = true;
            }
        } else {
            throw new UnsupportedOperationException("Unsupported operating system '" + SystemUtils.OS_NAME + "'.");
        }
        if (!mountThreadStarted) {
            showDialogToSelectSourceProductsNew();
        }
    }

    private void showDialogToSelectSourceProductsNew() {
        JFileChooser fileChooser = CustomFileChooser.buildFileChooser("Select source products", false, JFileChooser.FILES_ONLY);
        Property property = this.bindingContext.getPropertySet().getProperty(LOCAL_SHARED_FOLDER_PATH_PROPERTY);
        String sharedFolder = property.getValue();
        if (StringUtils.isBlank(sharedFolder)) {
            property = this.bindingContext.getPropertySet().getProperty(MASTER_SHARED_FOLDER_URL_PROPERTY);
            sharedFolder = property.getValue();
        }
        if (!StringUtils.isBlank(sharedFolder)) {
            File folder = new File(sharedFolder);
            fileChooser.setCurrentDirectory(folder);
        }
        int result = fileChooser.showDialog(getJDialog(), "Select");
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = new File[]{fileChooser.getSelectedFile()};
            addListItems(selectedFiles, File.class, SOURCE_PRODUCT_FILES_PROPERTY);
        }
    }

    private void selectMasterGraphFile() {
        selectGraphFile("Select the master graph file", MASTER_GRAPH_FILE_PATH_PROPERTY);
    }

    private void selectSlaveGraphFile() {
        selectGraphFile("Select the slave graph file", SLAVE_GRAPH_FILE_PATH_PROPERTY);
    }

    private void selectGraphFile(String dialogTitle, String bidingPropertyName) {
        CustomFileChooser fileChooser = CustomFileChooser.buildFileChooser(dialogTitle, false, JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(CustomFileChooser.buildXMLFileFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);
        Property property = this.bindingContext.getPropertySet().getProperty(bidingPropertyName);
        String graphFilePath = property.getValue();
        if (!StringUtils.isBlank(graphFilePath)) {
            File file = new File(graphFilePath);
            fileChooser.setCurrentDirectory(file.getParentFile());
            if (file.exists()) {
                fileChooser.setSelectedFile(file);
            }
        }
        int result = fileChooser.showDialog(getJDialog(), "Select");
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                property.setValue(selectedFile.getAbsolutePath());
            } catch (ValidationException e) {
                throw new IllegalStateException(e);
            }
        }
    }

    private void selectTargetProductFolderPath() {
        CustomFileChooser fileChooser = CustomFileChooser.buildFileChooser("Select folder", false, JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        Property property = this.bindingContext.getPropertySet().getProperty(TARGET_PRODUCT_FOLDER_PATH_PROPERTY);
        String targetProductFolderPath = property.getValue();
        if (!StringUtils.isBlank(targetProductFolderPath)) {
            File folder = new File(targetProductFolderPath);
            fileChooser.setCurrentDirectory(folder);
            if (folder.exists()) {
                fileChooser.setSelectedFile(folder);
            }
        }
        int result = fileChooser.showDialog(getJDialog(), "Select");
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFolder = fileChooser.getSelectedFile();
            try {
                property.setValue(selectedFolder.getAbsolutePath());
            } catch (ValidationException e) {
                throw new IllegalStateException(e);
            }
        }
    }

    private <ItemType> void removeListItems(int[] itemIndicesToRemove, Class<? extends ItemType> arrayType, String propertyName) {
        if (itemIndicesToRemove.length > 0) {
            Property property = this.bindingContext.getPropertySet().getProperty(propertyName);
            ValueSet valueSet = (ValueSet) property.getDescriptor().getAttribute(LIST_VALUE_SET_PROPERTY);
            if (valueSet == null) {
                throw new NullPointerException("The valueSet is null");
            } else {
                Object[] existingItems = valueSet.getItems();
                int index = 0;
                Object items = Array.newInstance(arrayType, existingItems.length - itemIndicesToRemove.length);
                for (int i = 0; i < existingItems.length; i++) {
                    boolean foundIndex = false;
                    for (int k = 0; k < itemIndicesToRemove.length && !foundIndex; k++) {
                        if (i == itemIndicesToRemove[k]) {
                            foundIndex = true;
                        }
                    }
                    if (!foundIndex) {
                        Array.set(items, index++, existingItems[i]);
                    }
                }
                if (index == Array.getLength(items)) {
                    property.getDescriptor().setAttribute(LIST_VALUE_SET_PROPERTY, new ValueSet((Object[]) items));
                } else {
                    throw new IllegalStateException("The remaining item count is different.");
                }
            }
        }
    }

    private <ItemType> void addListItems(ItemType[] itemsToAdd, Class<? extends ItemType> arrayType, String propertyName) {
        Property property = this.bindingContext.getPropertySet().getProperty(propertyName);
        ValueSet valueSet = (ValueSet) property.getDescriptor().getAttribute(LIST_VALUE_SET_PROPERTY);
        Object arrayItems;
        int offset;
        if (valueSet == null) {
            arrayItems = Array.newInstance(arrayType, itemsToAdd.length);
            offset = 0;
        } else {
            Object[] existingItems = valueSet.getItems();
            offset = existingItems.length;
            arrayItems = Array.newInstance(arrayType, offset + itemsToAdd.length);
            System.arraycopy(existingItems, 0, arrayItems, 0, offset);
        }
        System.arraycopy(itemsToAdd, 0, arrayItems, offset, itemsToAdd.length);
        property.getDescriptor().setAttribute(LIST_VALUE_SET_PROPERTY, new ValueSet((Object[]) arrayItems));
    }

    private <ItemType> void setListItems(ItemType[] items, String propertyName) {
        Property property = this.bindingContext.getPropertySet().getProperty(propertyName);
        property.getDescriptor().setAttribute(LIST_VALUE_SET_PROPERTY, new ValueSet(items));
    }

    private static JButton buildButton(String iconPath, ActionListener buttonListener, Dimension buttonSize) {
        JButton button = (JButton) ToolButtonFactory.createButton(UIUtils.loadImageIcon(iconPath), false);
        button.addActionListener(buttonListener);
        button.setPreferredSize(buttonSize);
        button.setMinimumSize(buttonSize);
        button.setMaximumSize(buttonSize);
        MouseListener[] listeners = button.getMouseListeners();
        button.removeMouseListener(listeners[1]); // remove the second listener
        return button;
    }

    private static void computePanelFirstColumn(JPanel contentPanel) {
        int rootPanelComponentCount = contentPanel.getComponentCount();
        int maximumLabelWidth = 0;
        for (int i=0; i<rootPanelComponentCount; i++) {
            Component component = contentPanel.getComponent(i);
            if (component instanceof JPanel) {
                JPanel childPanel = (JPanel)component;
                int childPanelComponentCount = childPanel.getComponentCount();
                for (int k=0; k<childPanelComponentCount; k++) {
                    Component subComponent = childPanel.getComponent(k);
                    if (subComponent instanceof JLabel) {
                        int labelWidth = subComponent.getPreferredSize().width;
                        if (maximumLabelWidth < labelWidth) {
                            maximumLabelWidth = labelWidth;
                        }
                    }
                }
            }
        }
        for (int i=0; i<rootPanelComponentCount; i++) {
            Component component = contentPanel.getComponent(i);
            if (component instanceof JPanel) {
                JPanel childPanel = (JPanel)component;
                int childPanelComponentCount = childPanel.getComponentCount();
                for (int k=0; k<childPanelComponentCount; k++) {
                    Component subComponent = childPanel.getComponent(k);
                    if (subComponent instanceof JLabel) {
                        JLabel label = (JLabel)subComponent;
                        Dimension labelSize = label.getPreferredSize();
                        labelSize.width = maximumLabelWidth;
                        label.setPreferredSize(labelSize);
                        label.setMinimumSize(labelSize);
                    }
                }
            }
        }
    }

    private static class CloudExploitationPlatformItem {

        private String masterSharedFolderURL;
        private String masterSharedFolderUsername;
        private String masterSharedFolderPassword;
        private String localSharedFolderPath;
        private String localPassword;
        private String slaveGraphFilePath;
        private File[] sourceProductFiles;
        private RemoteMachineCredentials[] remoteMachines;
        private String masterGraphFilePath;
        private String targetProductFolderPath;
        private String targetProductFileName;
        private Boolean continueOnFailure;
        private String targetProductFormatName;

        public CloudExploitationPlatformItem() {
        }
    }
}
