package org.esa.snap.cloud.exploitation.platform;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import org.esa.snap.cloud.exploitation.platform.executors.OutputConsoleBuffer;
import org.esa.snap.cloud.exploitation.platform.executors.SSHConnection;
import org.esa.snap.core.gpf.graph.GraphException;

import java.io.IOException;
import java.util.logging.Level;

/**
 * Created by jcoravu on 22/1/2019.
 */
public class WindowsRemoteMachineExecutor extends AbstractRemoteMachineExecutor {

    public WindowsRemoteMachineExecutor(String sharedFolderUsername, String sharedFolderPassword,
                                        ServerCredentials serverCredentials, RemoteMachinesGraphHelper remoteMachinesGraphHelper) {

        super(sharedFolderUsername, sharedFolderPassword, serverCredentials, remoteMachinesGraphHelper);
    }

    @Override
    protected int runGraph(Session session, String graphFilePathToProcess) throws IOException, JSchException {
        String command = buildRunGPTCommand(graphFilePathToProcess);
        OutputConsoleBuffer consoleBuffer = new OutputConsoleBuffer();
        int exitStatus = SSHConnection.executeWindowsCommand(session, command, consoleBuffer);

        logger.log(Level.FINE, buildLogMessage(command, consoleBuffer, exitStatus));

        return exitStatus;
    }

    @Override
    protected void execute(Session session) throws IOException, GraphException, SftpException, JSchException {
        String command = buildMountSharedDriveCommand(this.masterSharedFolderPassword);
        OutputConsoleBuffer consoleBuffer = new OutputConsoleBuffer();
        int exitStatus = SSHConnection.executeWindowsCommand(session, command, consoleBuffer);

        command = buildMountSharedDriveCommand("..."); // do not write the password in the log file
        logger.log(Level.FINE, buildLogMessage(command, consoleBuffer, exitStatus));

        if (exitStatus == 0) {
            runGraphs(session, '\\');
        }

//        String valuesToCheck[] = new String[] {"System error", "has occurred", "password is not correct"};
//        if (consoleBuffer.containsIgnoreCase(valuesToCheck)) {
//            return; // System error 86 has occurred. The specified network password is not correct.
//        }
//        runGraphs(session, '\\');
    }

    private String buildMountSharedDriveCommand(String masterSharedFolderPassword) {
        StringBuilder command = new StringBuilder();
        command.append("net use")
                .append(" ")
                .append(CloudExploitationPlatformOp.normalizeWindowsPath(this.remoteMachineCredentials.getSharedFolderPath()))
                .append(" ")
                .append(CloudExploitationPlatformOp.normalizeWindowsPath(this.remoteMachinesGraphHelper.getMasterSharedFolderURL()))
                .append(" ")
                .append(masterSharedFolderPassword)
                .append(" ")
                .append("/user:")
                .append(this.masterSharedFolderUsername)
                .append(" ")
                .append("/persistent:no");
        return command.toString();
    }

    private static String buildRunGPTCommand(String graphFilePathToProcess) {
        StringBuilder command = new StringBuilder();
        command.append("gpt")
                .append(" ")
                .append(CloudExploitationPlatformOp.normalizeWindowsPath(graphFilePathToProcess));
        return command.toString();
    }
}
