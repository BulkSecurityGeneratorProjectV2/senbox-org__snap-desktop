package org.esa.snap.cloud.exploitation.platform;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import org.esa.snap.cloud.exploitation.platform.executors.IOutputConsole;
import org.esa.snap.cloud.exploitation.platform.executors.OutputConsoleBuffer;
import org.esa.snap.cloud.exploitation.platform.executors.SSHConnection;
import org.esa.snap.core.gpf.graph.GraphException;

import java.io.IOException;
import java.util.logging.Level;

/**
 * Created by jcoravu on 22/1/2019.
 */
public class WindowsRemoteMachineExecutor extends AbstractRemoteMachineExecutor {

    public WindowsRemoteMachineExecutor(String masterSharedFolderURL, String sharedFolderUsername, String sharedFolderPassword,
                                        RemoteMachineCredentials serverCredentials, RemoteMachinesGraphHelper remoteMachinesGraphHelper) {

        super(masterSharedFolderURL, sharedFolderUsername, sharedFolderPassword, serverCredentials, remoteMachinesGraphHelper);
    }

    @Override
    public String normalizePath(String path) {
        return path.replace('/', '\\');
    }

    @Override
    public char getFileSeparatorChar() {
        return '\\';
    }

    @Override
    protected int runGraph(String graphFilePathToProcess) throws IOException, JSchException {
        String command = buildRunGPTCommand(graphFilePathToProcess);
        OutputConsoleBuffer consoleBuffer = new OutputConsoleBuffer();
        int exitStatus = this.sshConnection.executeWindowsCommand(command, consoleBuffer);

        logger.log(Level.FINE, buildLogMessage(command, consoleBuffer, exitStatus));

        return exitStatus;
    }

    @Override
    protected void runCommands() throws IOException, GraphException, SftpException, JSchException {
        // mount the shared drive
        String command = CloudExploitationPlatformOp.buildWindowsMountSharedDriveCommand(masterSharedFolderURL, masterSharedFolderUsername,
                                                                        masterSharedFolderPassword, this.remoteMachineCredentials.getSharedFolderPath());
        OutputConsoleBuffer consoleBuffer = new OutputConsoleBuffer();
        int exitStatus = this.sshConnection.executeWindowsCommand(command, consoleBuffer);

        // do not write the password in the log file
        command = CloudExploitationPlatformOp.buildWindowsMountSharedDriveCommand(masterSharedFolderURL, masterSharedFolderUsername,
                                                "...", this.remoteMachineCredentials.getSharedFolderPath());
        logger.log(Level.FINE, buildLogMessage(command, consoleBuffer, exitStatus));

        if (exitStatus == 0) {
            if (canContinueRunning()) {
                runGraphs();
            }
            
            // unmount the shared drive
            command = CloudExploitationPlatformOp.buildWindowsUnmountSharedDriveCommand(this.remoteMachineCredentials.getSharedFolderPath());
            consoleBuffer = new OutputConsoleBuffer();
            exitStatus = this.sshConnection.executeWindowsCommand(command, consoleBuffer);

            logger.log(Level.FINE, buildLogMessage(command, consoleBuffer, exitStatus));
        }
    }

    private static String buildRunGPTCommand(String graphFilePathToProcess) {
        StringBuilder command = new StringBuilder();
        command.append("gpt")
                .append(" ")
                .append(CloudExploitationPlatformOp.normalizeWindowsPath(graphFilePathToProcess));
        return command.toString();
    }
}
