package org.esa.snap.cloud.exploitation.platform.executors;


import java.io.*;

public class ProcessExecutor {

    public static int executeLinuxCommand(String command, String superUserPassword, File workingDirectory, IOutputConsole outputConsole) throws IOException {
        boolean asSuperUser = (superUserPassword != null);
        if (asSuperUser) {
            command = "sudo -S -p '' " + command;
        }
        ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c", command);
        if (workingDirectory != null) {
            pb.directory(workingDirectory);
        }
        //redirect the error of the tool to the standard output
        pb.redirectErrorStream(true);
        pb.environment().putAll(System.getenv());

        //start the process
        Process process = pb.start();
        try {
            if (asSuperUser) {
                OutputStream outputStream = process.getOutputStream();
                outputStream.write((superUserPassword + "\n").getBytes());
                outputStream.flush();
            }

            //get the process output
            InputStream inputStream = process.getInputStream();
            BufferedReader outReader = new BufferedReader(new InputStreamReader(inputStream));
            try {
                String line;
                while (true) {
                    while ((line = outReader.readLine()) != null) {
                        if (!"".equals(line.trim())) {
                            if (superUserPassword == null) {
                                outputConsole.normalMessage(line);
                            } else {
                                if (!superUserPassword.equals(line)) {
                                    outputConsole.normalMessage(line);
                                }
                            }
                        }
                    }
                    if (process.isAlive()) {
                        Thread.yield(); // yield the control to other threads
                    } else {
                        break;
                    }
                }
            } finally {
                closeStream(outReader);
            }
            return process.exitValue();
        } finally {
            resetProcess(process);
        }
    }

    private static void resetProcess(Process process) {
        if (process != null) {
            // if the process is still running, force it to isStopped
            if (process.isAlive()) {
                //destroy the process
                process.destroyForcibly();
            }
            try {
                //wait for the project to end.
                process.waitFor();
            } catch (InterruptedException ignored) {
            }
            //close all streams
            closeStream(process.getErrorStream());
            closeStream(process.getInputStream());
            closeStream(process.getOutputStream());
        }
    }

    private static void closeStream(Closeable stream) {
        if (stream != null) {
            try {
                stream.close();
            } catch (IOException e) {
                // nothing to do
            }
        }
    }
}
