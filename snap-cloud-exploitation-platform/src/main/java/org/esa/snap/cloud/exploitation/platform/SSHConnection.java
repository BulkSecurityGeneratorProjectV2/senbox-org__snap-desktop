package org.esa.snap.cloud.exploitation.platform;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import ro.cs.tao.utils.executors.OutputConsumer;
import ro.cs.tao.utils.executors.SSHExecutor;
import ro.cs.tao.utils.executors.SSHMode;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * Created by jcoravu on 21/1/2019.
 */
public class SSHConnection {

    private static final Logger logger = Logger.getLogger(SSHConnection.class.getName());

    private final String host;
    private final int portNumber;
    private final String username;
    private final String password;

    public SSHConnection(String host, int portNumber, String username, String password) {
        this.host = host;
        this.portNumber = portNumber;
        this.username = username;
        this.password = password;
    }

    public static void main(String args[]) throws JSchException, IOException, SftpException {
        System.out.println("main SSHConnection");

        String host = "192.168.61.13";
        int portNumber = 22;
        String username = "jean";
        String password = "jean";

        ServerCredentials serverCredentials = new ServerCredentials(host, portNumber, username, password, null, null);
        OutputConsumer outputConsumer = new OutputConsumer() {
            @Override
            public void consume(String message) {
                System.out.println(message);
            }
        };
        List<String> arguments = new ArrayList<String>();
        arguments.add("mkdir /home/jean/test-main");
        SSHExecutor executor = buildExecutor(serverCredentials, arguments, outputConsumer, true);
        executor.execute(true);
//
//        arguments = new ArrayList<String>();
//        arguments.add("mkdir s:\\testing-tao-utils-s");
//        executor = buildExecutor(remoteMachineCredentials, arguments, outputConsumer, false);
//        executor.execute(true);

//        SSHConnection connection = new SSHConnection(host, portNumber, username, password);
//        Session session = connection.openSesssion();
//        try {
//            connection.executeCommand(session, "net use q: \\\\pcd3331\\windows-shared jcoravu2 /user:C-S.RO\\jcoravu /persistent:no", false);
//
//            connection.executeCommand(session, "mkdir w1:\\testing-from-java-w1", false);
//
//            connection.executeCommand(session, "mkdir q:\\testing-from-java-q", false);
//            //connection.executeCommand(session, "net use j: /delete", false);
//        } finally {
//            session.disconnect();
//        }
    }

    private static SSHExecutor buildExecutor(ServerCredentials serverCredentials, List<String> arguments, OutputConsumer outputConsumer, boolean asSuperUser) {
        SSHExecutor executor = new SSHExecutor(serverCredentials.getHostName(), serverCredentials.getPortNumber(), arguments, asSuperUser, SSHMode.EXEC);
        executor.setUser(serverCredentials.getUsername());
        executor.setPassword(serverCredentials.getPassword());
        executor.setOutputConsumer(outputConsumer);
        return executor;
    }

    public Session openSesssion() throws JSchException {
        JSch jSch = new JSch();
        Session session = jSch.getSession(this.username, this.host, this.portNumber);
        session.setUserInfo(new UserInfo(this.password));
        session.setPassword(this.password.getBytes());
        session.setConfig("StrictHostKeyChecking", "no");
        session.connect();
        return session;
    }

    public static int executeLinuxCommand(Session session, String command, String superUserPassword, IOutputConsole outputConsole) throws JSchException, IOException {
        Channel channel = session.openChannel("exec");
        try {
            boolean asSuperUser = (superUserPassword != null);
            ChannelExec channelExec = (ChannelExec)channel;
            if (asSuperUser) {
                command = "sudo -S -p '' " + command;
            }
            channelExec.setCommand(command);
            channel.setInputStream(null);
            channelExec.setPty(asSuperUser); // allocate the pseudo-terminal to write the user password
            channelExec.setErrStream(new ChannelErrorStream(outputConsole));
            InputStream inputStream = channel.getInputStream();
            channel.connect();
            if (asSuperUser) {
                OutputStream outputStream = channel.getOutputStream();
                outputStream.write((superUserPassword + "\n").getBytes());
                outputStream.flush();
            }
            return readChannelResults(inputStream, channel, superUserPassword, outputConsole);
        } finally {
            channel.disconnect();
        }
    }

    public static int executeWindowsCommand(Session session, String command, IOutputConsole outputConsole) throws JSchException, IOException {
        Channel channel = session.openChannel("exec");
        try {
            ChannelExec channelExec = (ChannelExec)channel;
            channelExec.setCommand(command);
            channel.setInputStream(null);
            channelExec.setPty(false); // do not allocate the pseudo-terminal
            channelExec.setErrStream(new ChannelErrorStream(outputConsole));
            InputStream inputStream = channel.getInputStream();
            channel.connect();

            return readChannelResults(inputStream, channel, null, outputConsole);
        } finally {
            channel.disconnect();
        }
    }

    private static class ChannelErrorStream extends ByteArrayOutputStream {

        private final IOutputConsole outputConsole;

        private ChannelErrorStream(IOutputConsole outputConsole) {
            this.outputConsole = outputConsole;
        }

        @Override
        public synchronized void write(byte[] b, int off, int len) {
            String message = new String(b, off, len).replaceAll("\n", "");
            if (message.length() > 0) {
                this.outputConsole.errorMessage(message);
            }
        }
    }

    private static int readChannelResults(InputStream inputStream, Channel channel, String superUserPassword, IOutputConsole outputConsole) throws IOException {
        BufferedReader outReader = new BufferedReader(new InputStreamReader(inputStream));
        String line;
        while (true) {
            while ((line = outReader.readLine()) != null) {
                if (!"".equals(line.trim())) {
                    if (superUserPassword == null) {
                        outputConsole.normalMessage(line);
                    } else {
                        if (!superUserPassword.equals(line)) {
                            outputConsole.normalMessage(line);
                        }
                    }
                }
            }
            if (channel.isClosed()) {
                if (inputStream.available() > 0) {
                    continue;
                }
                break;
            }
        }
        return channel.getExitStatus();
    }

    private static class UserInfo implements com.jcraft.jsch.UserInfo {

        private final String password;

        private UserInfo(String password) {
            this.password = password;
        }

        @Override
        public String getPassphrase() {
            return null;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public boolean promptPassword(String s) {
            return false;
        }

        @Override
        public boolean promptPassphrase(String s) {
            return false;
        }

        @Override
        public boolean promptYesNo(String s) {
            return false;
        }

        @Override
        public void showMessage(String s) {
        }
    }
}
