package org.esa.snap.cloud.exploitation.platform.topology;

import org.esa.snap.cloud.exploitation.platform.ServerCredentials;
import org.esa.snap.core.util.SystemUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by jcoravu on 8/1/2019.
 */
public class RemoteTopologyUtils {

    private RemoteTopologyUtils() {
    }

    public static RemoteTopology readTopology() throws IOException, ParseException {
        Path cepFolderPath = SystemUtils.getApplicationDataDir().toPath().resolve("cloud-exploitation-platform");
        Path topologyFilePath = cepFolderPath.resolve("remote-topology.json");
        if (Files.exists(topologyFilePath)) {
            FileReader fileReader = new FileReader(topologyFilePath.toFile());
            try {
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                try {
                    JSONParser jsonParser = new JSONParser();
                    JSONObject rootItem = (JSONObject)jsonParser.parse(bufferedReader);

                    String sharedFolderURL = (String)rootItem.get("shared-folder");
                    String sharedFolderUsername = (String)rootItem.get("username");
                    String sharedFolderPassword = (String)rootItem.get("password");

                    JSONArray jsonArray = (JSONArray)rootItem.get("remote-machines");
                    List<ServerCredentials> remoteMachines = new ArrayList<ServerCredentials>();
                    for (int i=0; i<jsonArray.size(); i++) {
                        JSONObject jsonObject = (JSONObject)jsonArray.get(i);
                        String hostName = (String)jsonObject.get("host");
                        int portNumber = ((Number)jsonObject.get("port-number")).intValue();
                        String operatingSystemName = (String)jsonObject.get("operating-system");
                        String username = (String)jsonObject.get("username");
                        String password = (String)jsonObject.get("password");
                        String sharedFolderPath = (String)jsonObject.get("shared-folder");
                        ServerCredentials server = new ServerCredentials(hostName, portNumber, username, password, operatingSystemName, sharedFolderPath);
                        remoteMachines.add(server);
                    }

                    return new RemoteTopology(sharedFolderURL, sharedFolderUsername, sharedFolderPassword, remoteMachines);
                } finally {
                    bufferedReader.close();
                }
            } finally {
                fileReader.close();
            }
        }
        return null;
    }

    public static void writeTopology(RemoteTopology remoteTopology) throws IOException {
        JSONObject rootItem = new JSONObject();
        rootItem.put("shared-folder", remoteTopology.getSharedFolderURL());
        rootItem.put("username", remoteTopology.getSharedFolderUsername());
        rootItem.put("password", remoteTopology.getSharedFolderPassword());
        JSONArray jsonArray = new JSONArray();
        List<ServerCredentials> remoteMachines = remoteTopology.getRemoteMachines();
        for  (int i=0; i<remoteMachines.size(); i++) {
            ServerCredentials sshServer = remoteMachines.get(i);
            JSONObject item = new JSONObject();
            item.put("host", sshServer.getHostName());
            item.put("port-number", sshServer.getPortNumber());
            item.put("operating-system", sshServer.getOperatingSystemName());
            item.put("username", sshServer.getUsername());
            item.put("password", sshServer.getPassword());
            item.put("shared-folder", sshServer.getSharedFolderPath());
            jsonArray.add(item);
        }
        rootItem.put("remote-machines", jsonArray);

        Path cepFolderPath = SystemUtils.getApplicationDataDir().toPath().resolve("cloud-exploitation-platform");
        if (!Files.exists(cepFolderPath)) {
            Files.createDirectory(cepFolderPath);
        }
        Path topologyFilePath = cepFolderPath.resolve("remote-topology.json");
        PrintWriter printWriter = new PrintWriter(topologyFilePath.toFile());
        try {
            rootItem.writeJSONString(printWriter);
        } finally {
            printWriter.close();
        }
    }
}
